pdmat <- Posdef(n=100)
pdmat <- Posdef(n=1000)
pdmat <- Posdef(n=2000)
chol(pdmat)
test_chol <- chol(pdmat)
pdmat <- Posdef(n=5000)
m <- matrix(1:6, 2,3) ; v <- 1:3; v2 <- 2:1
View(m)
View(m)
v
m<-matrix(1,48,48)
n<-matrix(2,4,12)
test<-crossprod(m,n)
betainv(0.5,0.5,0.5)
# betainv is the function theta=betinv(beta)= Phi^{-1}[F(beta)]
betainv<-function(b, a, pi){
PHI<- pi*pnorm(b, a, 0.1)+ (1-pi)*pnorm(b, 0, 0.0001)
PHI[PHI>.999]<-.999
PHI[PHI<.001]<-.001
theta <- qnorm(PHI)
return(theta)
}
betainv(0.5,0.5,0.5)
makeB<- function( nlevel,latticeSize, a.wght, alpha){
da<- c( 0,0)
offset <- 0
for( k in 1:nlevel){
m1<- latticeSize[k,1]
m2<- latticeSize[k,2]
I<-      rep( 1:m1, m2)
J<- sort(rep( 1:m2, m1) )
I1<- rep( I,5)
J1<- rep( J,5)
value<- c( rep( a.wght, m1*m2), rep(-1, m1*m2*4) ) / sqrt( alpha[k])
I2<- c( I, I-1, I+1, I,  I)
J2<- c( J, J,   J,   J-1,J+1)
ind<- (I2<1) | (I2>m1) |  (J2<1) | (J2>m2)
I1<- I1[!ind]
q
J1<- J1[!ind]
makeB<- function( nlevel,latticeSize, a.wght, alpha){
da<- c( 0,0)
offset <- 0
for( k in 1:nlevel){
m1<- latticeSize[k,1]
m2<- latticeSize[k,2]
I<-      rep( 1:m1, m2)
J<- sort(rep( 1:m2, m1) )
I1<- rep( I,5)
J1<- rep( J,5)
value<- c( rep( a.wght, m1*m2), rep(-1, m1*m2*4) ) / sqrt( alpha[k])
I2<- c( I, I-1, I+1, I,  I)
J2<- c( J, J,   J,   J-1,J+1)
ind<- (I2<1) | (I2>m1) |  (J2<1) | (J2>m2)
I1<- I1[!ind]
J1<- J1[!ind]
I2<- I2[!ind]
J2<- J2[!ind]
value<- value[!ind]
tempInd<- cbind( I1 + (J1-1)*m1, I2 + (J2-1)*m1 ) + offset
if( k == 1){
index<- tempInd
ra <- value
}
else{
index<- rbind( index, tempInd )
ra<- c( ra, value)
}
da[1]<- da[1] + m1*m2
da[2]<- da[2] + m1*m2
offset<- offset + m1*m2
}
return( list( ind=index, ra=ra, da=da) )
}
library(LatticeKrig)
install.packages("LatticeKrig")
#setwd("~/Home/Projects/LKrigAnalysis")
source("makeB.R")
source("makeX.R")
source("LKDistanceSimple.R")
install.packages("extRemes")
install.packages("ismev")
install.packages("evd")
install.packages("evir")
install.packages("SpatialExtremes")
install.packages("&")
# Author: Pulong Ma University of Cincinnati
source('~/Google Drive/Pulong2016/Rcode/serial/analysis_example_simData.R', echo=TRUE)
install.packages("coda")
install.packages("igraph")
library("coda", lib.loc="~/Library/R/3.2/library")
library("igraph", lib.loc="~/Library/R/3.2/library")
install.packages(“nimble”, repos = http://r-nimble.org, type = “source”)
install.packages("nimble", repos = http://r-nimble.org, type = "source")
install.packages("nimble", repos = http://r-nimble.org, type = "source")
install.packages("nimble",repos=http://r-nimble.org,type="source")
install.packages("nimble",repos=http:r-nimble.org,type="source")
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
## model building finished
library(nimble)
pumpCode <- nimbleCode({
library(nimble)
pumpCode <- nimbleCode({
for (i in 1:N){
theta[i] ~ dgamma(alpha,beta)
lambda[i] <- theta[i]*t[i]
x[i] ~ dpois(lambda[i])
}
alpha ~ dexp(1.0)
beta ~ dgamma(0.1,1.0)
})
pumpConsts <- list(N = 10,
t = c(94.3, 15.7, 62.9, 126, 5.24,
31.4, 1.05, 1.05, 2.1, 10.5))
pumpData <- list(x = c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22))
pumpInits <- list(alpha = 1, beta = 1,
theta = rep(0.1, pumpConsts$N))
pump <- nimbleModel(code = pumpCode, name = 'pump', constants = pumpConsts,
data = pumpData, inits = pumpInits)
pumpMCMC <- buildMCMC(pump)
pumpMCMC$run(10)
warnings()
Cpump <- compileNimble(pump)
CpumpMCMC <- compileNimble(pumpMCMC, project = pump)
CpumpMCMC$run(10000)
library(nimble)
pumpCode <- nimbleCode({
for (i in 1:N){
theta[i] ~ dgamma(alpha,beta)
lambda[i] <- theta[i]*t[i]
x[i] ~ dpois(lambda[i])
}
alpha ~ dexp(1.0)
beta ~ dgamma(0.1,1.0)
})
pumpConsts <- list(N = 10,
t = c(94.3, 15.7, 62.9, 126, 5.24,
31.4, 1.05, 1.05, 2.1, 10.5))
pumpData <- list(x = c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22))
pumpInits <- list(alpha = 1, beta = 1,
theta = rep(0.1, pumpConsts$N))
pump <- nimbleModel(code = pumpCode, name = 'pump', constants = pumpConsts,
data = pumpData, inits = pumpInits)
MCMCsamples <- as.matrix(CpumpMCMC$mvSamples)
plot(MCMCsamples[ , 'alpha'], type = 'l', xlab = 'iteration',  ylab = expression(alpha))
MCMCsamples <- as.matrix(pumpMCMC$mvSamples)
MCMCsamples <- as.matrix(pumpMCMC$mvSamples)
plot(MCMCsamples[ , 'alpha'], type = 'l', xlab = 'iteration',  ylab = expression(alpha))
pumpMCMC$run(10)
MCMCsamples <- as.matrix(pumpMCMC$mvSamples)
plot(MCMCsamples[ , 'alpha'], type = 'l', xlab = 'iteration',  ylab = expression(alpha))
pumpMCMC$run(1000)
source('~/.active-rstudio-document', echo=TRUE)
require(graphics)
# Compute P(45 < X < 55) for X Binomial(100,0.5)
sum(dbinom(46:54, 100, 0.5))
require(graphics)
# Compute P(45 < X < 55) for X Binomial(100,0.5)
sum(dbinom(8, 145, 0.03))
require(graphics)
# Compute P(45 < X < 55) for X Binomial(100,0.5)
sum(dbinom(8, 145, 0.04))
require(graphics)
# Compute P(45 < X < 55) for X Binomial(100,0.5)
dbinom(8, 145, 0.04)
n <- 2000
k <- seq(0, n, by = 20)
plot (k, dbinom(k, n, pi/10, log = TRUE), type = "l", ylab = "log density",
main = "dbinom(*, log=TRUE) is better than  log(dbinom(*))")
lines(k, log(dbinom(k, n, pi/10)), col = "red", lwd = 2)
plot(dbinom(0:145,145,0.1))
plot(dbinom(0:145,145,0.5))
plot(dbinom(0:145,145,0.03))
library("rstudio", lib.loc="~/Library/R/3.3/library")
install.packages("devtools")
library("devtools", lib.loc="~/Library/R/3.3/library")
## gibbs sampler for fixed a1, a2
gibbs_sampler_fixa1a2 <- function(y, y_tr, X, X0, V, alpha, gammas, betas, etas, xis,
kappas, phis, deltas, rhos, pis,
a_rho=1e-2, b_rho=1e-2, a_pi=1e-2, b_pi=1e-2, a_a=1e-2, b_a=1e-2, a_g=1e-2, b_g=1e-2,
a_1, a_2, nu=3,
R=1e4, S=1e4, niter=1000, print_iter=10){
## y is n x I matrix of I observed y's
## y is n dim vector of initial true y values
## X is J dim list of n x L_j matrix of observed X's
## X0 is n x L_0 matrix of observed X_0's
## V is r x J matrix of intial V's
## alpha is scalar initial value of alpha
## gammas is J dim vector of initial gammas
## betas is J dim vector of initial betas
## etas is r dim vector of initial etas
## xis is J dim list of r x L_j matrix of initial xis
## kappas is r x L0 matrix of initial kappas
## phis is n x r matrix of initial phis
## deltas is r dim vector of initial deltas
## rhos is n dim vector of initial roes
## pis is n dim vector of initial pis
## a_rho, b_rho are shape, rate parameters for rho prior
## a_pi, b_pi are shape, rate parameters for pi prior
## a_a, b_a are shape, rate parameters for alpha prior
## a_g, b_g are shape, rate parameters for gamma prior
## a_1, a_2 are shape parameters for delta_1, delta_h, h > 1, respectively.
## ## Assumed fixed for now so these must be given.
## R and S are prior variances for beta and v_h,j priors, respectively.
## niter is number of iterations
## print_iter is value giving interval to print the iteration (e.g. every 10th)
n <- nrow(y)
r <- nrow(V)
J <- length(betas)
I <- ncol(y)
L <- sapply(X, ncol)
L0 <- ncol(X0)
# initialize Lambda matrix
Lambda <- matrix(NA, nr=n, nc=r)
## build storage objects
keep_X <- array(NA, c(n,J,niter))
keep_y <- matrix(NA, nc=n,nr=niter)
keep_Lambda <- array(NA, c(n, r, niter))
keep_beta <- matrix(NA, nr=niter+1, nc=J)
keep_beta[1,] <- betas
keep_pi <- matrix(NA, nr=niter+1, nc=n)
keep_pi[1,] <- pis
keep_rho <- matrix(NA, nr=niter+1, nc=n)
keep_rho[1,] <- rhos
keep_phi <- array(NA, c(n, r, niter+1))
keep_phi[,,1] <- phis
keep_tau <- matrix(NA, nr=niter+1, nc=r)
keep_tau[1,] <- cumprod(deltas)
keep_alpha <- rep(NA, niter+1)
keep_alpha[1] <- alpha
keep_gamma <- matrix(NA, nr=niter+1, nc=J)
keep_gamma[1,] <- gammas
## keep everything,
keep_V <- array(NA, c(r, J, niter+1))
keep_V[,,1] <- V
keep_etas <- matrix(NA, nr=niter+1, nc=r)
keep_etas[1,] <- etas
keep_kappas <- array(NA, c(r, L0, niter+1))
keep_kappas[,,1] <- kappas
keep_xis <- rep(list(NA), niter+1)
keep_xis[[1]] <- xis
## start loop
for(i in 1:niter){
# compute taus
tau <- cumprod(deltas) # h-dim vector of taus
# compute Vbeta
Vb = V%*%betas # r x 1 matrix
########## Sample Lambda
## lambda_k ~ N(m_k, pi_k*D)
# compute intermediate parts
SSvxi <- 0 # sum_{j=1}^J gamma_j \sum_{l=1}^{L_j} (v_j + \zetas_j^l)(v_j + \zetas_j^l)^T
SXvxi <- 0 # sum_{j=1}^J gamma_j \sum_{l=1}^{L_j} x_{k,j}^l(v_j + \zetas_j^l)
for(j in 1:J){
SXvxi = SXvxi + gammas[j]*tcrossprod(X[[j]], kronecker(matrix(1,nr=1,nc=L[j]), V[,j]) + xis[[j]])
# kronecker(matrix(1,nr=1,nc=L[j]), V[,j]) repeats v_j for L_j columns
# X[[j]] is n \times L_j and xis[[j]] is r \times L_j
# so X[[j]] %*% (1_{L_j}^T \otimes v_j + xis[[j]]) is equivalent to sum_{j=1}^J gamma_j \sum_{l=1}^{L_j} x_{k,j}^l(v_j + \zetas_j^l)
SSvxi = SSvxi + gammas[j]*tcrossprod(kronecker(matrix(1, nr=1, nc=L[j]),V[,j]) + xis[[j]])
# likewise by repeating v_j columns L_j times here, this is
# (1_{L_j}^T \otimes v_j + xis[[j]])(1_{L_j}^T \otimes v_j + xis[[j]])^T, which is equivalent to
# sum_{j=1}^J gamma_j \sum_{l=1}^{L_j} (v_j + \zetas_j^l)(v_j + \zetas_j^l)^T
}
stp <- alpha*tcrossprod(Vb + etas) + SSvxi + tcrossprod(kappas)
# stp is all components of precision for Lambda except D_k
## sample lambda_k,
for(k in 1:n){
V_l <- solve(chol(pis[k]*stp + diag(phis[k,]*tau)))
# V_l is inverse of cholsky decomp of precision, s.t. V_l V_l^T = Lambda full conditional variance
# diag(phis[k,]*tau) = D_k
Lambda[k,] <- tcrossprod(V_l)%*%(alpha*y_tr[k]*(Vb + etas) + SXvxi[k,] + kappas%*%X0[k,])*pis[k] + V_l%*%rnorm(r)
# tcrossprod(V_l) = V_l V_l^T is variance
# (alpha*y_tr[k]*(Vb + etas) + SXvxi[k,] + kappas%*%X0[k,])*pis[k] is the remaining portion for lambda full conditional
}
######### sample y_tr
V_y <- 1/(I*rhos + alpha*pis)
# vector of variances (I*W^{-1} + \alpha*\Sigma^{-1})^{-1} for y conditional
m_y <- V_y*(rowSums(y)*rhos + alpha*pis*(Lambda%*%(Vb + etas)))
# rowSums(y)*rhos is W^{-1} \sum_{i=1}^I y^{(i)}
# alpha*pis*(Lambda%*%(Vb + etas))) is \alpha*\Sigma^{-1}(\sum_{j=1}^J \Lambda v_j \beta_j + \Lambda \eta)
y_tr <- m_y + sqrt(V_y)*rnorm(n)
# sample true y
######### sample v_j
ss <- crossprod(Lambda*sqrt(pis)) # \Lambda \Sigma^{-1} \Lambda^T
for(j in 1:J){
Ev <- solve(chol((alpha*betas[j]^2 + L[j]*gammas[j])*ss + diag(1/S, r)))
# inverse of upper triangle cholesky of (alpha*beta_j^2 + gamma)*\Lambda \Sigma^{-1} \Lambda^T + S^{-1} I_r
# tcrossprod(Ev) = Ev Ev^T -- the variance of v_j full conditional
V[,j] <- tcrossprod(Ev)%*%(alpha*betas[j]*crossprod(Lambda*pis, (y_tr - Lambda%*%(matrix(V[,-j],ncol=J-1)%*%betas[-j] + etas)))) +
gammas[j]*rowSums(crossprod(Lambda*pis, X[[j]] - Lambda%*%xis[[j]])) + Ev%*%rnorm(r)
# alpha*betas[j]*crossprod(Lambda*pis, (y_tr - Lambda%*%(matrix(V[,-j],ncol=J-1)%*%betas[-j] + etas))))
# is \alpha*\beta_j \Lambda^T \Sigma^{-1} (y - \Lambda (V_{-j}\beta_{-j} + \eta))
# gammas[j]*rowSums(crossprod(Lambda*pis, X[[j]] - Lambda%*%xis[[j]])) is \gamma_j \sum_{l=1}^{L_j} \Lambda^T \Sigma^{-1} (X[[j]] - \Lambda \xis[[j]])
# where X[[j]] is n \times L_j and xis[[j]] is r \times L_j
}
######### sample phis
rates_phi <- (nu + c((Lambda^2)%*%diag(tau)))/2
# n*r vector of (nu + \lambda_{k,h}^2 \tau_h)/2
shape_phi <- (nu+1)/2
phis <- matrix(rgamma(n*r, shape_phi, rate=rates_phi), nr=n, nc=r)
# n \times r matrix is phis
########## sample rhos
rates_rho <- b_rho + 0.5*rowSums((y - kronecker(matrix(1,nr=1,nc=I),y_tr))^2)
# kronecker(matrix(1,nr=1,nc=I),y_tr) repeats y_tr for I columns so that
# rowSums((y - kronecker(matrix(1,nr=1,nc=I),y_tr))^2) is \sum_{i=1}^I (y^{(i)} - y)^2
shape_rho <- a_rho+I/2
rhos <- rgamma(n, shape_rho, rate = rates_rho)
# n-dim vector of rhos
########## sample pis
# compute Vbeta again for updated V,beta
Vb = V%*%betas
## compute sums of squares components
SSx <- 0
for(j in 1:J){
SSx <- SSx + gammas[j]*rowSums((X[[j]] - Lambda%*%(kronecker(matrix(1, nr=1, nc=L[j]),V[,j]) + xis[[j]]))^2)
# SSx is \sum_{j=1}^J \gamma_j \sum_{l=1}^{L_j} (x_{k,j}^l - \lambda_k^T v_j - \lambda_k^T \zeta_j^l)^2
# kronecker is used again to repeat columns of v_j L_j times
}
SSk <- rowSums((X0 - Lambda%*%kappas)^2)
# SSk is \sum_{l=1}^{L_0} (x_{k,0}^l - \lambda_k^T \kappa_l)
# kappas is r \times L_0
# X0 is n \times L_0
rates_pis <- c(b_pi + 0.5*(alpha*(y_tr - Lambda%*%(Vb + etas))^2 + SSx + SSk))
# vector or rates for pis
# the k^th element of (y_tr - Lambda%*%(Vb+etas))^2 is (y_k - \sum_{j=1}^J \lambda_k^T V\beta - \lambda_k^T \eta)^2
shape_pis <-  a_pi + 0.5*(1 + sum(L) + L0)
pis <- rgamma(n, shape_pis, rate = rates_pis)
# n-dim vector of pis
######### sample beta ~ N(b_c, B_c)
# compute Lambda*V
LV = Lambda%*%V
# compute mean and var
B_c <- solve(alpha*t(LV*pis)%*%LV + diag(1/R,J)) # beta conditional variance
# alpha*(V^T \Lambda^T \Sigma^{-1} \Lambda V^T) + R^{-1} I_J
b_c <- alpha*B_c%*%t(LV*pis)%*%(y_tr-Lambda%*%etas) # beta conditional mean
# B_c (alpha*\Lambda^T \Sigma^{-1} (y - \Lambda \eta))
betas <- b_c + t(chol(B_c))%*%rnorm(J)
# t(chol(B_c)) is cholesky lower triangular matrix of variance matrix
Lpis <- Lambda*pis # Lambda \Sigma^{-1}
#### setup for etas, xis, kappas since all have same variance up to scalar
ChL <- solve(chol(crossprod(Lambda*sqrt(pis)) + diag(1,r)))
# inverse of upper triangle of cholesky of (\Lambda^T \Sigma^{-1} \Lambda + I_r)
Cvar <- tcrossprod(ChL) # ChL ChL^T
# (\Lambda^T \Sigma^{-1} \Lambda + I_r)^{-1}
CvarL <- tcrossprod(Cvar,Lpis)
# (\Lambda^T \Sigma^{-1} \Lambda + I_r)^{-1} \Lambda^T \Sigma^{-1}
######### sample eta ~ N(et_c, Et_c Et_c^T)
etas <- CvarL%*%(y_tr - LV%*%betas) + 1/sqrt(alpha)*ChL%*%rnorm(r)
# CvarL%*%(y_tr - LV%*%betas) is (\Lambda^T \Sigma^{-1} \Lambda + I_r)^{-1} \Lambda^T \Sigma^{-1} (y - \Lambda V\beta)
# (1/sqrt(alpha)*ChL) (1/sqrt(alpha)*ChL)^T gives the variance
######### sample xis_{j,l} ~ N(xi_c, Xi_c Xi_c^T)
for(j in 1:J){
for(l in 1:L[j]){
xi_c <- CvarL%*%(X[[j]][,l] - LV[,j])
# (\Lambda^T \Sigma^{-1} \Lambda + I_r)^{-1} \Lambda^T \Sigma^{-1} (x_j^{(l)} - \Lambda v_j)
xis[[j]][,l] <- xi_c + 1/sqrt(gammas[j])*ChL%*%rnorm(r)
# (1/sqrt(gamma_j)*ChL) (1/sqrt(gamma_j)*ChL)^T gives the variance
}
}
#### sample kappa_l ~ N(k_c, K_c K_c^T)
kappas <- apply(X0, 2, function(u) CvarL%*%u + ChL%*%rnorm(r))
# kappas is r \times L_j, so applying over columns gives each column a sampled kappa_l
# CvarL%*%u  is (\Lambda^T \Sigma^{-1} \Lambda + I_r)^{-1} \Lambda^T \Sigma^{-1} x_0^{(l)}
#### sample gamma
for(j in 1:J){
SSgL <- sapply(1:L[j], function(u) crossprod((X[[j]][,u] - LV[,j] - c(Lambda%*%xis[[j]][,u]))*sqrt(pis)) + crossprod(xis[[j]][,u]))
# crossprod((X[[j]][,u] - LV[,j] - c(Lambda%*%xis[[j]][,u]))*sqrt(pis)) is (x_j^{(l)} - \Lambda v_j - \Lambda \zeta_j^{(l)})^T \Sigma^{-1} (x_j^{(l)} - \Lambda v_j - \Lambda \zeta_j^{(l)})
# crossprod(xis[[j]][,u]) is (zeta_j^{(l)}) (zeta_j^{(l)})^T
# SSgL is L_j dim vector of the sum of the above two quantities
gammas[j] <- rgamma(1, a_g + (n+r)*L[j]/2, rate=b_g + 0.5*sum(SSgL))
# sum(SSgL) gives the sums of squares portion of the rate parameter for gamma_j
}
#### sample delta_1
deltas[1] <- rgamma(1, a_1 + n*r/2, 1+0.5*(sum(cumprod(deltas[-1])%*%t(Lambda[,-1]^2*phis[,-1])) + sum(Lambda[,1]^2*phis[,1])))
# cumprod(delta[-1]) is delta_2, delta_2*delta_3, delta_2*delta_3*delta_4, ...
# sum(cumprod(deltas[-1])%*%t(Lambda[,-1]^2*phis[,-1])) is for portion of \sum_{h=1}^r for h > 1
# sum(Lambda[,1]^2*phis[,1]) is sum portion for h=1
#### sample delta_{-1}
for(l in 2:r){
pd <- cumprod(deltas[-l])
# e.g. for l=3, \delta_1, \delta_1*\delta_2, \delta_1*delta_2*\delta_4
deltas[l] <- rgamma(1, a_2 + n*(r-l+1)/2, 1+0.5*sum(pd[(l-1):(r-1)]%*%t(Lambda[,-c(1:(l-1))]^2*phis[,-c(1:(l-1))])))
# pd[(l-1):(r-1)] is r-l+1 dim vector
# e.g. for l=4, \delta_1*\delta_2*\delta_3, \delta_1*\delta_2*\delta_3*\delta*5, ...
# Lambda[,-c(1:(l-1))] is l:r columns of Lambda
# phis[,-c(1:(l-1))] is l:r columns of phis
}
##### sample alpha
Vb <- V%*%betas
alpha <- rgamma(1, a_a + (n+r)/2, rate=b_a + 0.5*(crossprod((y_tr - Lambda%*%(Vb + etas))*sqrt(pis)) + crossprod(etas)))
# crossprod((y_tr - Lambda%*%(Vb + etas))*sqrt(pis)) is (y - \Lambda (V\beta + \eta))^T \Sigma^{-1} (y - \Lambda (V\beta + \eta))
# crossprod(etas) is eta^T eta
## sample a1, a2 -- do later, fixed for now
keep_X[,,i] <- LV
keep_y[i,] <- y_tr
keep_Lambda[,,i] <- Lambda
keep_beta[i+1,] <- betas
keep_pi[i+1,] <- pis
keep_rho[i+1,] <- rhos
keep_phi[,,i+1] <- phis
keep_tau[i+1,] <- cumprod(deltas)
keep_alpha[i+1] <- alpha
keep_gamma[i+1,] <- gammas
keep_V[,,i+1] <- V
keep_etas[i+1,] <- etas
keep_kappas[,,i+1] <- kappas
keep_xis[[i+1]] <- xis
if(i%%print_iter==0){
cat("\r", paste("iter =", i))
}
}
return(list(
X = keep_X,
y_tr = keep_y,
Lambda = keep_Lambda,
betas= keep_beta,
pis = keep_pi,
rhos = keep_rho,
phis = keep_phi,
taus = keep_tau,
alphas = keep_alpha,
gammas = keep_gamma,
etas = keep_etas,
kappas = keep_kappas,
Vs = keep_V,
xis=keep_xis))
}
############# Try with toy data #################
# set.seed(123)
J <- 2
n <- 200
## build C
pis2 <- rgamma(n, 2, 1)
H <- abs(outer(1:n, 1:n, "-"))
# ar(1), with theta=0.99, covariance with var(1) + diag(1/pis)
C <-  0.99^H + diag(1/pis2)
plot(eigen(0.99^H)$value, type="l", ylab="Eigenvalue")
abline(v=30) # set r = 30 to start
abline(v=10, col="red") # set r = 30 to start
## simulate true X from prior
X_tr <- t(mvtnorm::rmvnorm(J, rep(0,n), 0.99^H))
## build true X manually for J=2
J <- 2
X1 <- t(mvtnorm::rmvnorm(1, rnorm(n,0,0.1), 0.99^H))
X2 <- t(mvtnorm::rmvnorm(1, rnorm(n,4,0.1), 0.99^H))
plot(X2, col="red",ylim=range(c(X1,X2)),ylab="value")
points(X1)
View(X1)
View(X1)
A<- matrix( 1:48, ncol=6)
image.plot(1:8, 1:6, A)
library(fields)
image.plot(1:8, 1:6, A)
image.plot( t( A[6:1,]), axes=FALSE)
install.packages("forecast")
# Set working directory
setwd(/Users/dorith/Dropbox/ActiveResearch/SH_CO)
# library to read matlab data formats into R
library(R.matlab)
# read in our data
ClimIndices <- readMat("/Users/dorith/Dropbox/ActiveResearch/SH_CO/Data/climate_indices/ClimInd.mat")
install.packages("R.matlab")
# Set working directory
setwd(/Users/dorith/Dropbox/ActiveResearch/SH_CO)
# library to read matlab data formats into R
library(R.matlab)
# read in our data
ClimIndices <- readMat("/Users/dorith/Dropbox/ActiveResearch/SH_CO/Data/climate_indices/ClimInd.mat")
# library to calculate and plot partial cross correlation
library(forecast)
install.packages("forecast")
library(forecast)
forecast::pacf(ClimIndices$aao)
forecast::Pacf(ClimIndices$aao, lag.max=10)
forecast::Pacf([ClimIndices$aao,ClimIndices$dmi], lag.max=10)
forecast::Pacf(cbind(ClimIndices$aao,ClimIndices$dmi), lag.max=10)
forecast::Pacf(cbind(ClimIndices$aao,ClimIndices$dmi), lag.max=5)
forecast::Pacf(cbind(ClimIndices$aao,ClimIndices$dmi), lag.max=10)
forecast::Pacf(cbind(ClimIndices$aao,ClimIndices$dmi), lag.max=10, calc.ci=T)
warnings()
forecast::Pacf(cbind(ClimIndices$aao,ClimIndices$dmi), lag.max=10)
forecast::Pacf(cbind(ClimIndices$aao,ClimIndices$dmi), lag.max=10)
getwd()
setwd("~/Dropbox/Courses/HPC4Stats/HPC4StatsCMIP/batch")
RNamelist     <- Sys.getenv("HPC4StatsNAMELIST")
RNamelist     <- Sys.getenv("HPC4StatsNAMELIST")
RNamelist     <- Sys.getenv("HPC4StatsNAMELIST")
Sys.time()
#
uniqueTime<- format(Sys.time(), format = "%jX%H%M%S")
uniqueTime<- format(Sys.time(), format = "%j%H%M%S")
uniqueTime<- format(Sys.time(), format = "%Y%H%M%S")
uniqueTime<- format(Sys.time(), format = "%Y%M%%D%H%M%S")
uniqueTime<- format(Sys.time(), format = "%Y%M%D%H%M%S")
uniqueTime<- format(Sys.time(), format = "%X")
uniqueTime<- format(Sys.time(), format = "%Y")
uniqueTime<- format(Sys.time(), format = "%X")
uniqueTime<- format(Sys.time(), format = "%jX")
uniqueTime<- format(Sys.time(), format = "%H")
uniqueTime<- format(Sys.time(), format = "%a")
uniqueTime<- format(Sys.time(), format = "%b")
uniqueTime<- format(Sys.time(), format = "%D%b")
uniqueTime<- format(Sys.time(), format = "%d%b")
uniqueTime<- format(Sys.time(), format = "%d%b%y")
uniqueTime<- format(Sys.time(), format = "%d%b%y%X")
uniqueTime<- format(Sys.time(), format = "%d%b%y%H")
uniqueTime<- format(Sys.time(), format = "%d%b%Y%H")
uniqueTime<- format(Sys.time(), format = "%d%b%Y_%H")
uniqueTime<- format(Sys.time(), format = "%d%b%Y_%H%M$S")
uniqueTime<- format(Sys.time(), format = "%d%b%Y_%H%M%S")
uniqueTime<- format(Sys.time(), format = "%Y%d%b%H%M%S")
RNamelist     <- Sys.getenv("HPC4StatsNAMELIST")
install.packages("optimParallel")
